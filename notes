MENU:
linux/main.cpp (TorcsEntry) >
libs/client/entry.cpp (GfInitClient, TorcsMainMenuInit) >
libs/client/mainmenu.cpp (ReSinglePlayerInit) >
libs/raceengineclient/singleplayer.cpp (ReAddRacemanListButton) >
libs/raceengineclient/raceinit.cpp (list of possible race modes racemanList build with the xml files in config/raceman, callback to reSelectRaceman > ReStateApply) >
libs/raceengineclient/racemanmenu.cpp (ReRacemanMenu) >
libs/raceengineclient/raceinit.cpp (ReStartNewRace) >
libs/raceengineclient/racestate.cpp !!!!!!(ReStateManage)!!!!!!

QUARTER SCREEN DRAW ISSUE:
libs/raceengineclient/racemain.cpp (reRaceRealStart) >
libs/raceengineclient/racegl.cpp (ReScreenInit, ReResScreenInit)
> !!!!! ReInfo->_reGraphicItf.initview((sw-vw)/2, (sh-vh)/2, vw, vh, GR_VIEW_STD, ReInfo->_reGameScreen);
GfScrGetSize fails -> sw, sh, vw, vh = (0, 0, 640, 480), draw area = ((sw-vw)/2, (sh-vh)/2, vw, vh) = (-320, -240, 640, 480) = start drawing below top left, top right corner falls on center of the screen

files modified:
skipMenu:
libs/raceengineclient/raceinit.cpp - added skipMenu function
linux/main.cpp - changed the way raceconfig parameter is handled, now it is passed to skipMenu.
libs/client/entry.cpp - removed menu init, added skipMenu call
countdown:
libs/raceengineclient/raceengine.cpp - removed countdown (ready, set, go) at race start.
Draw issue:
libs/raceengineclient/racemain.cpp line 321, ReInfo->_reGraphicItf.initview((sw-vw)/2, (sh-vh)/2, vw, vh), GR_VIEW_STD, ReInfo->_reGameScreen);  to ReInfo->_reGraphicItf.initview(0, 0, vw, vh, GR_VIEW_STD, ReInfo->_reGameScreen);
Vision:
linux/main.cpp - Removed shared memory access attribues from shared_use_st structure
libs/raceengineclient/raceengine.cpp - Removed pausing of shared memory write

SOCKET BUFFER TOO LARGE ISSUE:
clients slower than torcs (20 ms each step) will run into an issue where they read from the tail of an evergrowing udp buffer, preventing them to get new data.
check scr_server.cpp on line 225. possibly set small buffer size (3?) set with int setsockopt(int socket, int level, int option_name, const void *option_value, socklen_t option_len);
es
int bufsize = 3;
setsockopt(listenSocket[index], SOL_SOCKET, SO_RCVBUF, &bufsize, sizeof(bufsize));
